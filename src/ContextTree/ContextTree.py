from ContextNode import *


class ContextTree:
    """
    Data structure used to apply the context generation in an automatic and recursive way

    Attributes:
        root: Root node of the tree from which the context generation starts
        feature_names: List containing the name of the features used to index the feature_values parameter
        feature_values: Dictionary containing the mapping between the features and the values the features
        can assume, the format is {feature_name: [value0, value1, value2, ...]}
        confidence: Confidence to use in the lower bound used in the context generation algorithm
        context_structure: Final context structure generated by the algorithm, it is set the first time the structure is
        requested
    """

    def __init__(self, feature_names, feature_values, feature_to_observation, confidence):
        """
        Initialize the data structure

        :param list feature_names: List containing the name of the features used to index the feature_values parameter
        :param dict feature_values: Dictionary containing the mapping between the features and the values the features
        can assume, the format is {feature_name: [value0, value1, value2, ...]}
        :param dict feature_to_observation:
        :param float confidence: Confidence to use in the lower bound used in the context generation algorithm
        """
        self.root = ContextNode(feature_names, feature_values, feature_to_observation, confidence, None)
        self.feature_names = feature_names
        self.feature_values = feature_values
        self.confidence = confidence
        self.context_structure = None
        self.create_context_structure()

    def create_context_structure(self):
        self.root.split()

    def get_context_structure(self):
        if self.context_structure is None:
            context_structure = self.root.get_contexts()
            context_structure_final = set()

            for context in context_structure:
                context_tuple = ()
                for feature_name in self.feature_names:
                    context_tuple = context_tuple + tuple([context[feature_name]])
                context_structure_final.add(context_tuple)

            return context_structure_final
        else:
            return self.context_structure

feature_names = ['age', 'sex']
feature_values = {'age': [0, 1], 'sex': [0, 1]}
feature_to_observation = {(0, 0): [[0, 0, 0, 40, 0, 541]],
                          (0, 1): [[0, 0, 0, 54, 0, 541], [0, 0, 0, 123, 0, 4234], [0, 0, 0, 43, 0, 344]],
                          (1, 0): [[0, 0, 0, 4, 0, 17], [0, 0, 0, 44, 0, 541], [0, 0, 0, 64, 0, 333], [0, 0, 0, 46, 0, 312]],
                          (1, 1): [[0, 0, 0, 54, 0, 541]]}
confidence = 0
tree = ContextTree(feature_names, feature_values, feature_to_observation, confidence)
print(tree.get_context_structure())
print(f'The root splits on {tree.root.choice if tree.root.choice is not None else "nothing"}')
